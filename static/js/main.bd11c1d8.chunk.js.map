{"version":3,"sources":["apiUtil.js","EventInfo.js","EventTool.js","App.js","apiKey.js","serviceWorker.js","index.js"],"names":["fetchUser","token","a","fetch","headers","Authorization","promise","json","fetchOrgs","id","EventInfo","event","console","log","logo","src","url","start","toLocaleString","href","title","summary","capacity","Container","styled","div","Header","TitleBar","h2","Main","SideBar","EventPanel","allViews","Object","keys","Views","map","k","localizer","momentLocalizer","moment","EventTool","hash","useLocation","useState","events","setEvents","loading","setLoading","selected","setSelected","split","useEffect","key","fetchEvents","orgIds","urls","Promise","all","then","promises","res","data","eventsArray","forEach","array","concat","name","text","Date","local","end","userData","orgData","organizations","org","apiCalls","defaultDate","showMultiDayTimes","step","views","defaultView","onSelectEvent","e","style","borderRadius","Login","App","basename","process","path","component","exact","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","origin","addEventListener","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.bd11c1d8.chunk.js","sourcesContent":["export async function fetchUser(token) {\n  let promise = await fetch(`https://www.eventbriteapi.com/v3/users/me/`, {\n    headers: { Authorization: `Bearer ${token}` }\n  });\n  return await promise.json();\n}\nexport async function fetchOrgs(id, token) {\n  let promise = await fetch(\n    `https://www.eventbriteapi.com/v3/users/${id}/organizations/?token=${token}`\n  );\n  return await promise.json();\n}\n","import React from \"react\";\n\nfunction EventInfo({ event }) {\n  console.log(event);\n  return event ? (\n    <div>\n      {event.logo ? <img src={event.logo.url} /> : null}\n      {event.start ? <p>{event.start.toLocaleString()}</p> : null}\n      <h1>\n        <a href={event.url}>{event.title}</a>\n      </h1>\n      <p>{event.summary}</p>\n      <p>capacity: {event.capacity}</p>\n    </div>\n  ) : null;\n}\n\nexport default EventInfo;\n","import React, { useState, useEffect } from \"react\";\nimport { Calendar, Views, momentLocalizer } from \"react-big-calendar\";\nimport { useLocation } from \"react-router-dom\";\nimport { fetchUser, fetchOrgs } from \"./apiUtil\";\nimport styled from \"styled-components\";\nimport moment from \"moment\";\nimport EventInfo from \"./EventInfo\";\n\n//styled components\nconst Container = styled.div`\n  width: 100vw;\n  height: 90vh;\n  background-color: cornflowerblue;\n  display: flex;\n`;\nconst Header = styled.div`\n  width: 100vw;\n  height: 10vh;\n  background-color: cornflowerblue;\n  display: flex;\n  align-items: flex-end;\n  justify-content: center;\n`;\nconst TitleBar = styled.h2`\n  font-size: 40pt;\n  color: white;\n  font-weight: bolder;\n`;\nconst Main = styled.div`\n  margin: 20px;\n  width: 100%;\n  background-color: white;\n`;\nconst SideBar = styled.div`\n  width: 40%;\n  background-color: cornflowerblue;\n  display: flex;\n  align-items: stretch;\n`;\nconst EventPanel = styled.div`\n  margin: 20px;\n  background-color: lightgrey;\n  width: 370px;\n  border-radius: 5px;\n  padding: 8px;\n`;\nlet allViews = Object.keys(Views).map(k => Views[k]);\nconst localizer = momentLocalizer(moment);\n\nfunction EventTool() {\n  let { hash } = useLocation();\n  let [events, setEvents] = useState([]);\n  let [loading, setLoading] = useState(false);\n  let [selected, setSelected] = useState({});\n  const selectEvent = e => {\n    setSelected(e);\n  };\n  let token = hash.split(\"=\")[2];\n  useEffect(() => {\n    async function apiCalls(key) {\n      setLoading(true);\n      let userData = await fetchUser(key);\n      let orgData = await fetchOrgs(userData.id, key);\n      let orgIds = orgData.organizations.map(org => org.id);\n      async function fetchEvents(orgIds, token) {\n        let urls = orgIds.map(id =>\n          fetch(\n            `https://www.eventbriteapi.com/v3/organizations/${id}/events/?token=${token}&status=live`\n          )\n        );\n        Promise.all(urls).then(promises => {\n          Promise.all(promises.map(res => res.json())).then(data => {\n            let eventsArray = [];\n            data.forEach(array => {\n              eventsArray = eventsArray.concat(array.events);\n              eventsArray = eventsArray.map(event => {\n                return {\n                  ...event,\n                  title: event.name.text,\n                  start: new Date(event.start.local),\n                  end: new Date(event.end.local)\n                };\n              });\n            });\n            setEvents(eventsArray);\n            setLoading(false);\n          });\n        });\n      }\n      fetchEvents(orgIds, key);\n    }\n    if (token) {\n      apiCalls(token);\n    }\n  }, [token]);\n  return (\n    <>\n      <Header>\n        <TitleBar>Event Tool</TitleBar>\n      </Header>\n      <Container>\n        <Main>\n          {loading ? (\n            <div>Loading Data</div>\n          ) : (\n            <Calendar\n              localizer={localizer}\n              defaultDate={new Date()}\n              showMultiDayTimes\n              step={60}\n              views={allViews}\n              defaultView=\"month\"\n              events={events}\n              onSelectEvent={selectEvent}\n              style={{ borderRadius: \"5px\" }}\n            />\n          )}\n        </Main>\n        <SideBar>\n          <EventPanel>\n            <EventInfo event={selected} />\n          </EventPanel>\n        </SideBar>\n      </Container>\n    </>\n  );\n}\n\nexport default EventTool;\n","import \"css-reset-and-normalize\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nimport React from \"react\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport { apikey } from \"./apiKey\";\nimport EventTool from \"./EventTool\";\n\nfunction Login() {\n  let url = `https://www.eventbrite.com/oauth/authorize?response_type=token&client_id=${apikey}&redirect_uri=http://www.ericamrhein.com/event_tool/event/`;\n  return (\n    <div>\n      <a href={url}>Login</a>\n    </div>\n  );\n}\nfunction App() {\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Route path=\"/event\" component={EventTool} />\n      <Route exact path=\"/\" component={Login} />\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","export const apikey = \"SB6DREK3YC4EMKPUV6\";\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}