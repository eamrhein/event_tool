{"ast":null,"code":"var _jsxFileName = \"/home/eamrhein/event_tool/event_tool/src/EventTool.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Calendar, Views, momentLocalizer } from \"react-big-calendar\";\nimport { useLocation } from \"react-router-dom\";\nimport { fetchUser, fetchOrgs } from \"./apiUtil\";\nimport styled from \"styled-components\";\nimport moment from \"moment\";\nimport EventInfo from \"./EventInfo\"; //styled components\n\nconst Container = styled.div`\n  width: 100vw;\n  height: 90vh;\n  background-color: cornflowerblue;\n  display: flex;\n`;\nconst Header = styled.div`\n  width: 100vw;\n  height: 10vh;\n  background-color: cornflowerblue;\n  display: flex;\n  align-items: flex-end;\n  justify-content: center;\n`;\nconst TitleBar = styled.h2`\n  font-size: 40pt;\n  color: white;\n  font-weight: bolder;\n`;\nconst Main = styled.div`\n  margin: 20px;\n  width: 100%;\n  background-color: white;\n`;\nconst SideBar = styled.div`\n  width: 40%;\n  background-color: cornflowerblue;\n  display: flex;\n  align-items: stretch;\n`;\nconst EventPanel = styled.div`\n  margin: 20px;\n  background-color: lightgrey;\n  width: 370px;\n  border-radius: 5px;\n  padding: 8px;\n`;\nlet allViews = Object.keys(Views).map(k => Views[k]);\nconst localizer = momentLocalizer(moment);\n\nfunction EventTool() {\n  let {\n    hash\n  } = useLocation();\n  let [events, setEvents] = useState([]);\n  let [loading, setLoading] = useState(false);\n  let [selected, setSelected] = useState({});\n\n  const selectEvent = e => {\n    setSelected(e);\n  };\n\n  let token = hash.split(\"=\")[2];\n  useEffect(() => {\n    async function apiCalls(key) {\n      setLoading(true);\n      let userData = await fetchUser(key);\n      let orgData = await fetchOrgs(userData.id, key);\n      let orgIds = orgData.organizations.map(org => org.id);\n\n      async function fetchEvents(orgIds, token) {\n        let urls = orgIds.map(id => fetch(`https://www.eventbriteapi.com/v3/organizations/${id}/events/?token=${token}&status=live`));\n        Promise.all(urls).then(promises => {\n          Promise.all(promises.map(res => res.json())).then(data => {\n            let eventsArray = [];\n            data.forEach(array => {\n              eventsArray = eventsArray.concat(array.events);\n              eventsArray = eventsArray.map(event => {\n                return { ...event,\n                  title: event.name.text,\n                  start: new Date(event.start.local),\n                  end: new Date(event.end.local)\n                };\n              });\n            });\n            setEvents(eventsArray);\n            setLoading(false);\n          });\n        });\n      }\n\n      fetchEvents(orgIds, key);\n    }\n\n    if (token) {\n      apiCalls(token);\n    }\n  }, [token]);\n  return React.createElement(React.Fragment, null, React.createElement(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(TitleBar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, \"Event Tool\")), React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, React.createElement(Main, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, loading ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, \"Loading Data\") : React.createElement(Calendar, {\n    localizer: localizer,\n    defaultDate: new Date(),\n    showMultiDayTimes: true,\n    step: 60,\n    views: allViews,\n    defaultView: \"month\",\n    events: events,\n    onSelectEvent: selectEvent,\n    style: {\n      borderRadius: \"5px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  })), React.createElement(SideBar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, React.createElement(EventPanel, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, React.createElement(EventInfo, {\n    event: selected,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  })))));\n}\n\nexport default EventTool;","map":{"version":3,"sources":["/home/eamrhein/event_tool/event_tool/src/EventTool.js"],"names":["React","useState","useEffect","Calendar","Views","momentLocalizer","useLocation","fetchUser","fetchOrgs","styled","moment","EventInfo","Container","div","Header","TitleBar","h2","Main","SideBar","EventPanel","allViews","Object","keys","map","k","localizer","EventTool","hash","events","setEvents","loading","setLoading","selected","setSelected","selectEvent","e","token","split","apiCalls","key","userData","orgData","id","orgIds","organizations","org","fetchEvents","urls","fetch","Promise","all","then","promises","res","json","data","eventsArray","forEach","array","concat","event","title","name","text","start","Date","local","end","borderRadius"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Calendar, Views, momentLocalizer } from \"react-big-calendar\";\nimport { useLocation } from \"react-router-dom\";\nimport { fetchUser, fetchOrgs } from \"./apiUtil\";\nimport styled from \"styled-components\";\nimport moment from \"moment\";\nimport EventInfo from \"./EventInfo\";\n\n//styled components\nconst Container = styled.div`\n  width: 100vw;\n  height: 90vh;\n  background-color: cornflowerblue;\n  display: flex;\n`;\nconst Header = styled.div`\n  width: 100vw;\n  height: 10vh;\n  background-color: cornflowerblue;\n  display: flex;\n  align-items: flex-end;\n  justify-content: center;\n`;\nconst TitleBar = styled.h2`\n  font-size: 40pt;\n  color: white;\n  font-weight: bolder;\n`;\nconst Main = styled.div`\n  margin: 20px;\n  width: 100%;\n  background-color: white;\n`;\nconst SideBar = styled.div`\n  width: 40%;\n  background-color: cornflowerblue;\n  display: flex;\n  align-items: stretch;\n`;\nconst EventPanel = styled.div`\n  margin: 20px;\n  background-color: lightgrey;\n  width: 370px;\n  border-radius: 5px;\n  padding: 8px;\n`;\nlet allViews = Object.keys(Views).map(k => Views[k]);\nconst localizer = momentLocalizer(moment);\n\nfunction EventTool() {\n  let { hash } = useLocation();\n  let [events, setEvents] = useState([]);\n  let [loading, setLoading] = useState(false);\n  let [selected, setSelected] = useState({});\n  const selectEvent = e => {\n    setSelected(e);\n  };\n  let token = hash.split(\"=\")[2];\n  useEffect(() => {\n    async function apiCalls(key) {\n      setLoading(true);\n      let userData = await fetchUser(key);\n      let orgData = await fetchOrgs(userData.id, key);\n      let orgIds = orgData.organizations.map(org => org.id);\n      async function fetchEvents(orgIds, token) {\n        let urls = orgIds.map(id =>\n          fetch(\n            `https://www.eventbriteapi.com/v3/organizations/${id}/events/?token=${token}&status=live`\n          )\n        );\n        Promise.all(urls).then(promises => {\n          Promise.all(promises.map(res => res.json())).then(data => {\n            let eventsArray = [];\n            data.forEach(array => {\n              eventsArray = eventsArray.concat(array.events);\n              eventsArray = eventsArray.map(event => {\n                return {\n                  ...event,\n                  title: event.name.text,\n                  start: new Date(event.start.local),\n                  end: new Date(event.end.local)\n                };\n              });\n            });\n            setEvents(eventsArray);\n            setLoading(false);\n          });\n        });\n      }\n      fetchEvents(orgIds, key);\n    }\n    if (token) {\n      apiCalls(token);\n    }\n  }, [token]);\n  return (\n    <>\n      <Header>\n        <TitleBar>Event Tool</TitleBar>\n      </Header>\n      <Container>\n        <Main>\n          {loading ? (\n            <div>Loading Data</div>\n          ) : (\n            <Calendar\n              localizer={localizer}\n              defaultDate={new Date()}\n              showMultiDayTimes\n              step={60}\n              views={allViews}\n              defaultView=\"month\"\n              events={events}\n              onSelectEvent={selectEvent}\n              style={{ borderRadius: \"5px\" }}\n            />\n          )}\n        </Main>\n        <SideBar>\n          <EventPanel>\n            <EventInfo event={selected} />\n          </EventPanel>\n        </SideBar>\n      </Container>\n    </>\n  );\n}\n\nexport default EventTool;\n"]},"metadata":{},"sourceType":"module"}