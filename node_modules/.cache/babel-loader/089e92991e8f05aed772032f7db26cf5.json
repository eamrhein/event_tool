{"ast":null,"code":"var _jsxFileName = \"/home/eamrhein/event_tool/event_tool/src/EventTool.js\";\nimport React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { Calendar, Views, momentLocalizer } from \"react-big-calendar\";\nimport moment from \"moment\";\nimport { useLocation } from \"react-router-dom\"; //styled components\n\nconst Container = styled.div`\n  width: 100vw;\n  height: 90vh;\n  background-color: cornflowerblue;\n  display: flex;\n`;\nconst Header = styled.div`\n  width: 100vw;\n  height: 10vh;\n  background-color: cornflowerblue;\n  display: flex;\n  align-items: flex-end;\n  justify-content: center;\n`;\nconst TitleBar = styled.h2`\n  font-size: 40pt;\n  color: white;\n  font-weight: bolder;\n`;\nconst Main = styled.div`\n  margin: 20px;\n  width: 100%;\n  background-color: white;\n`;\nconst SideBar = styled.div`\n  width: 40%;\n  background-color: cornflowerblue;\n  display: flex;\n  align-items: stretch;\n`;\nconst EventPanel = styled.div`\n  margin: 20px;\n  background-color: lightgrey;\n  width: 100%;\n  border-radius: 5px;\n  padding: 8px;\n`;\nlet allViews = Object.keys(Views).map(k => Views[k]);\nconst localizer = momentLocalizer(moment);\nconst defaultState = {\n  events: [{\n    id: 1,\n    start: new Date(),\n    end: new Date(moment().add(1, \"days\")),\n    title: \"Event 1\",\n    color: \"lightblue\"\n  }, {\n    id: 2,\n    start: new Date(),\n    end: new Date(moment().add(3, \"days\")),\n    title: \"Event 2\",\n    color: \"lightblue\"\n  }]\n};\n\nconst selectEvent = e => {\n  console.log(e);\n};\n\nasync function fetchUser(token) {\n  let promise = await fetch(`https://www.eventbriteapi.com/v3/users/me/`, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  return await promise.json();\n}\n\nasync function fetchOrgs(id, token) {\n  let promise = await fetch(`https://www.eventbriteapi.com/v3/users/${id}/organizations/?token=${token}`);\n  return await promise.json();\n}\n\nasync function fetchEvents(orgIds, token) {\n  let urls = orgIds.map(id => {\n    fetch(`https://www.eventbriteapi.com/v3/organizations/${id}/events/?token=${token}`).then(resp => resp.json());\n    return events;\n  });\n  console.log(urls);\n}\n\nfunction EventTool() {\n  let {\n    hash\n  } = useLocation();\n  let token = hash.split(\"=\")[2];\n  useEffect(() => {\n    async function apiCalls(key) {\n      let userData = await fetchUser(key);\n      let orgData = await fetchOrgs(userData.id, key);\n      let orgIds = orgData.organizations.map(org => org.id);\n      let eventsData = await fetchEvents(orgIds, key);\n    }\n\n    apiCalls(token);\n  }, []);\n  return React.createElement(React.Fragment, null, React.createElement(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, React.createElement(TitleBar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, \"Event Tool\")), React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, React.createElement(Main, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, React.createElement(Calendar, {\n    localizer: localizer,\n    defaultDate: new Date(),\n    showMultiDayTimes: true,\n    step: 60,\n    views: allViews,\n    defaultView: \"month\",\n    events: defaultState.events,\n    onSelectEvent: selectEvent,\n    style: {\n      borderRadius: \"5px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  })), React.createElement(SideBar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, React.createElement(EventPanel, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, \"test\"))));\n}\n\nexport default EventTool;","map":{"version":3,"sources":["/home/eamrhein/event_tool/event_tool/src/EventTool.js"],"names":["React","useState","useEffect","styled","Calendar","Views","momentLocalizer","moment","useLocation","Container","div","Header","TitleBar","h2","Main","SideBar","EventPanel","allViews","Object","keys","map","k","localizer","defaultState","events","id","start","Date","end","add","title","color","selectEvent","e","console","log","fetchUser","token","promise","fetch","headers","Authorization","json","fetchOrgs","fetchEvents","orgIds","urls","then","resp","EventTool","hash","split","apiCalls","key","userData","orgData","organizations","org","eventsData","borderRadius"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { Calendar, Views, momentLocalizer } from \"react-big-calendar\";\nimport moment from \"moment\";\nimport { useLocation } from \"react-router-dom\";\n//styled components\nconst Container = styled.div`\n  width: 100vw;\n  height: 90vh;\n  background-color: cornflowerblue;\n  display: flex;\n`;\nconst Header = styled.div`\n  width: 100vw;\n  height: 10vh;\n  background-color: cornflowerblue;\n  display: flex;\n  align-items: flex-end;\n  justify-content: center;\n`;\nconst TitleBar = styled.h2`\n  font-size: 40pt;\n  color: white;\n  font-weight: bolder;\n`;\nconst Main = styled.div`\n  margin: 20px;\n  width: 100%;\n  background-color: white;\n`;\nconst SideBar = styled.div`\n  width: 40%;\n  background-color: cornflowerblue;\n  display: flex;\n  align-items: stretch;\n`;\nconst EventPanel = styled.div`\n  margin: 20px;\n  background-color: lightgrey;\n  width: 100%;\n  border-radius: 5px;\n  padding: 8px;\n`;\nlet allViews = Object.keys(Views).map(k => Views[k]);\nconst localizer = momentLocalizer(moment);\nconst defaultState = {\n  events: [\n    {\n      id: 1,\n      start: new Date(),\n      end: new Date(moment().add(1, \"days\")),\n      title: \"Event 1\",\n      color: \"lightblue\"\n    },\n    {\n      id: 2,\n      start: new Date(),\n      end: new Date(moment().add(3, \"days\")),\n      title: \"Event 2\",\n      color: \"lightblue\"\n    }\n  ]\n};\nconst selectEvent = e => {\n  console.log(e);\n};\nasync function fetchUser(token) {\n  let promise = await fetch(`https://www.eventbriteapi.com/v3/users/me/`, {\n    headers: { Authorization: `Bearer ${token}` }\n  });\n  return await promise.json();\n}\nasync function fetchOrgs(id, token) {\n  let promise = await fetch(\n    `https://www.eventbriteapi.com/v3/users/${id}/organizations/?token=${token}`\n  );\n  return await promise.json();\n}\n\nasync function fetchEvents(orgIds, token) {\n  let urls = orgIds.map(id => {\n    fetch(\n      `https://www.eventbriteapi.com/v3/organizations/${id}/events/?token=${token}`\n    ).then(resp => resp.json());\n    return events;\n  });\n  console.log(urls);\n}\n\nfunction EventTool() {\n  let { hash } = useLocation();\n  let token = hash.split(\"=\")[2];\n  useEffect(() => {\n    async function apiCalls(key) {\n      let userData = await fetchUser(key);\n      let orgData = await fetchOrgs(userData.id, key);\n      let orgIds = orgData.organizations.map(org => org.id);\n      let eventsData = await fetchEvents(orgIds, key);\n    }\n    apiCalls(token);\n  }, []);\n  return (\n    <>\n      <Header>\n        <TitleBar>Event Tool</TitleBar>\n      </Header>\n      <Container>\n        <Main>\n          <Calendar\n            localizer={localizer}\n            defaultDate={new Date()}\n            showMultiDayTimes\n            step={60}\n            views={allViews}\n            defaultView=\"month\"\n            events={defaultState.events}\n            onSelectEvent={selectEvent}\n            style={{ borderRadius: \"5px\" }}\n          />\n        </Main>\n        <SideBar>\n          <EventPanel>test</EventPanel>\n        </SideBar>\n      </Container>\n    </>\n  );\n}\n\nexport default EventTool;\n"]},"metadata":{},"sourceType":"module"}